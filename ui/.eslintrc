{
    // http://eslint.org/docs/rules/

    "parser": "babel-eslint",
    "ecmaFeatures": {
        /**
         * enable arrow functions
         */
        "arrowFunctions": true,

        /**
         * enable binary literals
         */
        "binaryLiterals": false,

        /**
         * enable let and const (aka block bindings)
         */
        "blockBindings": true,

        /**
         * enable es6 classes
         */
        "classes": false,

        /**
         * enable default function parameters
         */
        "defaultParams": true,

        /**
         * enable destructuring for variables and params
         */
        "destructuring": true,

        /**
         * enable for-of loops
         */
        "forOf": true,

        /**
         * enable generators
         */
        "generators": true,

        /**
         * enable modules and global strict mode
         */
        "modules": true,

        /**
         * enable computed object literal property names
         */
        "objectLiteralComputedProperties": false,

        /**
         * enable duplicate object literal properties in strict mode
         */
        "objectLiteralDuplicateProperties": false,

        /**
         * enable object literal shorthand methods
         */
        "objectLiteralShorthandMethods": false,

        /**
         * enable object literal shorthand properties
         */
        "objectLiteralShorthandProperties": false,

        /**
         * enable octal literals
         */
        "octalLiterals": false,

        /**
         * enable the regular expression u flag
         */
        "regexUFlag": false,

        /**
         * enable the regular expression y flag
         */
        "regexYFlag": false,

        /**
         * enable rest function parameters
         */
        "restParams": true,

        /**
         * enable spread operator
         */
        "spread": true,

        /**
         * enable super references inside functions
         */
        "superInFunctions": false,

        /**
         * enable template strings
         */
        "templateStrings": true,

        /**
         * enable code point escapes
         */
        "unicodeCodePointEscapes": false,

        /**
         * allow return statements in the global scope
         */
        "globalReturn": false,

        /**
         * enable JSX
         */
        "jsx": true
    },

    "env": {
        /**
         * browser global variables.
         */
        "browser": true,

        /**
         * Node.js global variables and Node.js-specific rules.
         */
        "node": true,

        /**
         * web workers global variables
         */
        "worker": false,

        /**
         * defines require() and define() as global variables as per the amd spec.
         */
        "amd": true,

        /**
         * adds all of the Mocha testing global variables.
         */
        "mocha": false,

        /**
         * adds all of the Jasmine testing global variables for version 1.3 and 2.0.
         */
        "jasmine": false,

        /**
         * phantomjs global variables.
         */
        "phantomjs": true,

        /**
         * jquery global variables.
         */
        "jquery": false,

        /**
         * prototypejs global variables.
         */
        "prototypejs": false,

        /**
         * shelljs global variables.
         */
        "shelljs": false,

        /**
         * meteor global variables
         */
        "meteor": false,

        /**
         * enable all ECMAScript 6 features except for modules
         */
        "es6": false
    },

    "globals": {
        "jest": false,

        /* MOCHA */
        "describe": false,
        "it": false,
        "before": false,
        "beforeEach": false,
        "after": false,
        "afterEach": false,
        "expect": false
    },

    "plugins": [
        "react"
    ],

    // 0: off, 1: warning, 2: error (sets error code)
    "rules": {
        // Possible Errors
        /**
         * disallow or enforce trailing commas
         */
        "comma-dangle": 0,

        /**
         * disallow assignment in conditional expressions
         */
        "no-cond-assign": 0,

        /**
         * disallow use of console (off by default in the node environment)
         */
        "no-console": 0,

        /**
         * disallow use of constant expressions in conditions
         */
        "no-constant-condition": 2,

        /**
         * disallow control characters in regular expressions
         */
        "no-control-regex": 1,

        /**
         * disallow use of debugger
         */
        "no-debugger": 2,

        /**
         * disallow duplicate arguments in functions
         */
        "no-dupe-args": 2,

        /**
         * disallow duplicate keys when creating object literals
         */
        "no-dupe-keys": 2,

        /**
         * disallow a duplicate case label
         */
        "no-duplicate-case": 2,

        /**
         * disallow empty statements
         */
        "no-empty": 2,

        /**
         * disallow assigning to the exception in a catch block
         */
        "no-ex-assign": 2,

        /**
         * disallow double-negation boolean casts in a boolean context
         */
        "no-extra-boolean-cast": 2,

        /**
         * disallow unnecessary parentheses (off by default)
         */
        "no-extra-parens": 0,

        /**
         * disallow unnecessary semicolons
         */
        "no-extra-semi": 2,

        /**
         * disallow overwriting functions written as function declarations
         */
        "no-func-assign": 2,

        /**
         * disallow function or variable declarations in nested blocks
         */
        "no-inner-declarations": [2, "functions"],

        /**
         * disallow invalid regular expression strings in the RegExp constructor
         */
        "no-invalid-regexp": 2,

        /**
         * disallow irregular whitespace outside of strings and comments
         */
        "no-irregular-whitespace": 2,

        /**
         * disallow negation of the left operand of an in expression
         */
        "no-negated-in-lhs": 2,

        /**
         * disallow the use of object properties of the global object (Math and JSON) as functions
         */
        "no-obj-calls": 2,

        /**
         * disallow multiple spaces in a regular expression literal
         */
        "no-regex-spaces": 2,

        /**
         * disallow sparse arrays
         */
        "no-sparse-arrays": 2,

        /**
         * disallow unreachable statements after a return, throw, continue, or break statement
         */
        "no-unreachable": 2,

        /**
         * disallow comparisons with the value NaN
         */
        "use-isnan": 2,

        /**
         * Ensure JSDoc comments are valid (off by default)
         */
        "valid-jsdoc": 0,

        /**
         * Ensure that the results of typeof are compared against a valid string
         */
        "valid-typeof": 2,

        // Best Practices
        /**
         * require get and set to be defined in pairs; not available until eslint 0.22
         */
        // "accessor-pairs": [2, {"getWithoutSet": true}],

        /**
         * treat var statements as if they were block scoped (off by default)
         */
        "block-scoped-var": 2,

        /**
         * specify the maximum cyclomatic complexity allowed in a program (off by default)
         */
        "complexity": 0,

        /**
         * require return statements to either always or never specify values
         */
        "consistent-return": 1,

        /**
         * specify curly brace conventions for all control statements
         */
        "curly": 2,

        /**
         * require default case in switch statements (off by default)
         */
        "default-case": 1,

        /**
         * encourages use of dot notation whenever possible
         */
        "dot-notation": 2,

        /**
         * require the use of === and !==
         */
        "eqeqeq": 2,

        /**
         * make sure for-in loops have an if statement (off by default)
         */
        "guard-for-in": 0,

        /**
         * disallow the use of alert, confirm, and prompt
         */
        "no-alert": 2,

        /**
         * disallow use of arguments.caller or arguments.callee
         */
        "no-caller": 2,

        /**
         * disallow division operators explicitly at beginning of regular expression (off by default)
         */
        "no-div-regex": 1,

        /**
         * disallow else after a return in an if (off by default)
         */
        "no-else-return": 1,

        /**
         * disallow use of labels for anything other then loops and switches
         */
        "no-empty-label": 2,

        /**
         * disallow comparisons to null without a type-checking operator (off by default)
         */
        "no-eq-null": 2,

        /**
         * disallow use of eval()
         */
        "no-eval": 2,

        /**
         * disallow adding to native types
         */
        "no-extend-native": 2,

        /**
         * disallow unnecessary function binding
         */
        "no-extra-bind": 2,

        /**
         * disallow fallthrough of case statements
         */
        "no-fallthrough": 2,

        /**
         * disallow the use of leading or trailing decimal points in numeric literals (off by default)
         */
        "no-floating-decimal": 1,

        /**
         * disallow use of eval()-like methods
         */
        "no-implied-eval": 2,

        /**
         * disallow usage of __iterator__ property
         */
        "no-iterator": 2,

        /**
         * disallow use of labeled statements
         */
        "no-labels": 2,

        /**
         * disallow unnecessary nested blocks
         */
        "no-lone-blocks": 2,

        /**
         * disallow creation of functions within loops
         */
        "no-loop-func": 1,

        /**
         * disallow use of multiple spaces
         * Covered by jscs
         */
        "no-multi-spaces": 0,

        /**
         * disallow use of multiline strings
         */
        "no-multi-str": 2,

        /**
         * disallow reassignments of native objects
         */
        "no-native-reassign": 2,

        /**
         * disallow use of new operator when not part of the assignment or comparison
         */
        "no-new": 1,

        /**
         * disallow use of new operator for Function object
         */
        "no-new-func": 2,

        /**
         * disallows creating new instances of String, Number, and Boolean
         */
        "no-new-wrappers": 2,

        /**
         * disallow use of octal literals
         */
        "no-octal": 2,

        /**
         * disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
         */
        "no-octal-escape": 2,

        /**
         * disallow reassignment of function parameters (off by default)
         */
        "no-param-reassign": 0,

        /**
         * disallow use of process.env (off by default)
         */
        "no-process-env": 0,

        /**
         * disallow usage of __proto__ property
         */
        "no-proto": 2,

        /**
         * disallow declaring the same variable more then once
         */
        "no-redeclare": 2,

        /**
         * disallow use of assignment in return statement
         */
        "no-return-assign": 2,

        /**
         * disallow use of javascript: urls.
         */
        "no-script-url": 0,

        /**
         * disallow comparisons where both sides are exactly the same (off by default)
         */
        "no-self-compare": 2,

        /**
         * disallow use of comma operator
         */
        "no-sequences": 2,

        /**
         * restrict what can be thrown as an exception (off by default)
         */
        "no-throw-literal": 2,

        /**
         * disallow usage of expressions in statement position
         */
        "no-unused-expressions": 2,

        /**
         * disallow use of void operator (off by default)
         */
        "no-void": 2,

        /**
         * disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
         * Covered by jscs
         */
        "no-warning-comments": 0,

        /**
         * disallow use of the with statement
         */
        "no-with": 2,

        /**
         * require use of the second argument for parseInt() (off by default)
         */
        "radix": 2,

        /**
         * requires to declare all vars on top of their containing scope (off by default)
         */
        "vars-on-top": 0,

        /**
         * require immediate function invocation to be wrapped in parentheses (off by default)
         */
        "wrap-iife": 2,

        /**
         * require or disallow Yoda conditions
         */
        "yoda": 0,

        // Strict Mode
        /**
         * controls location of Use Strict Directives
         */
        "strict": 0,

        // Variables
        /**
         * disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
         */
        "no-catch-shadow": 2,

        /**
         * disallow deletion of variables
         */
        "no-delete-var": 2,

        /**
         * disallow labels that share a name with a variable
         */
        "no-label-var": 2,

        /**
         * disallow declaration of variables already declared in the outer scope
         */
        "no-shadow": 2,

        /**
         * disallow shadowing of names such as arguments
         */
        "no-shadow-restricted-names": 2,

        /**
         * disallow use of undeclared variables unless overridden by a global eslint declaration
         */
        "no-undef": 2,

        /**
         * disallow use of undefined when initializing variables
         */
        "no-undef-init": 2,

        /**
         * disallow use of undefined variable (off by default)
         */
        "no-undefined": 0,

        /**
         * disallow declaration of variables that are not used in the code
         */
        "no-unused-vars": 1,

        /**
         * disallow use of variables before they are defined
         */
        "no-use-before-define": 2,

        // Node.js
        /**
         * enforces error handling in callbacks (off by default) (on by default in the node environment)
         */
        "handle-callback-err": 1,

        /**
         * disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
         */
        "no-mixed-requires": 1,

        /**
         * disallow use of new operator with the require function (off by default) (on by default in the node environment)
         */
        "no-new-require": 2,

        /**
         * disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
         */
        "no-path-concat": 2,

        /**
         * disallow process.exit() (on by default in the node environment)
         */
        "no-process-exit": 1,

        /**
         * restrict usage of specified node modules (off by default)
         */
        "no-restricted-modules": 0,

        /**
         * disallow use of synchronous methods (off by default)
         */
        "no-sync": 0,

        // Stylistic Issues
        // jscs covers most style issues
        // These options are the ones that jscs does not have an analog for
        /**
         * disallow the omission of parentheses when invoking a constructor with no arguments
         */
        "new-parens": 2,

        /**
         * disallow use of the Array constructor
         */
        "no-array-constructor": 2,

        /**
         * disallow if as the only statement in an else block (off by default)
         */
        "no-lonely-if": 1,

        /**
         * disallow multiple empty lines (off by default)
         */
        "no-multiple-empty-lines": 2,

        /**
         * disallow use of the Object constructor
         */
        "no-new-object": 2,

        /**
         * require assignment operator shorthand where possible or prohibit it entirely (off by default)
         */
        "operator-assignment": [1, "always"],

        // Turn off all other style rules, some of which are covered by jscs and some of which we do not want to turn on
        /**
         * enforce one true brace style (off by default)
         */
        "brace-style": 0,

        /**
         * require camel case names
         */
        "camelcase": 0,

        /**
         * enforce spacing before and after comma
         */
        "comma-spacing": 0,

        /**
         * enforce one true comma style (off by default)
         */
        "comma-style": 0,

        /**
         * enforces consistent naming when capturing the current execution context (off by default)
         */
        "consistent-this": 0,

        /**
         * enforce newline at the end of file, with no multiple empty lines
         */
        "eol-last": 0,

        /**
         * require function expressions to have a name (off by default)
         */
        "func-names": 0,

        /**
         * enforces use of function declarations or expressions (off by default)
         */
        "func-style": 0,

        /**
         * this option sets a specific tab width for your code (off by default)
         */
        "indent": 0,

        /**
         * enforces spacing between keys and values in object literal properties
         */
        "key-spacing": 0,

        /**
         * enforces empty lines around comments (off by default)
         */
        "lines-around-comment": 0,

        /**
         * disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
         */
        "linebreak-style": 0,

        /**
         * specify the maximum depth callbacks can be nested (off by default)
         */
        "max-nested-callbacks": 0,

        /**
         * require a capital letter for constructors
         */
        "new-cap": 0,

        /**
         * allow/disallow an empty newline after var statement (off by default);
         */
        "newline-after-var": 0,

        /**
         * disallow use of the continue statement (off by default)
         */
        "no-continue": 0,

        /**
         * disallow comments inline after code (off by default)
         */
        "no-inline-comments": 0,

        /**
         * disallow mixed spaces and tabs for indentation
         */
        "no-mixed-spaces-and-tabs": 0,

        /**
         * disallow nested ternary expressions (off by default)
         */
        "no-nested-ternary": 0,

        /**
         * disallow space between function identifier and application
         */
        "no-spaced-func": 0,

        /**
         * disallow the use of ternary operators (off by default)
         */
        "no-ternary": 0,

        /**
         * disallow trailing whitespace at the end of lines
         */
        "no-trailing-spaces": 0,

        /**
         * disallow dangling underscores in identifiers
         */
        "no-underscore-dangle": 0,

        /**
         * require or disallow padding inside curly braces (off by default)
         */
        "object-curly-spacing": 0,

        /**
         * allow just one var statement per function (off by default)
         */
        "one-var": 0,

        /**
         * enforce operators to be placed before or after line breaks (off by default)
         */
        "operator-linebreak": 0,

        /**
         * enforce padding within blocks (off by default)
         */
        "padded-blocks": 0,

        /**
         * require quotes around object literal property names (off by default)
         */
        "quote-props": 0,

        /**
         * specify whether backticks, double or single quotes should be used
         */
        "quotes": 0,

        /**
         * enforce spacing before and after semicolons
         */
        "semi-spacing": 0,

        /**
         * sort variables within the same declaration block (off by default)
         */
        "semi": 0,

        /**
         * sort variables within the same declaration block (off by default)
         */
        "sort-vars": 0,

        /**
         * require a space after certain keywords (off by default)
         */
        "space-after-keywords": 0,

        /**
         * require or disallow space before blocks (off by default)
         */
        "space-before-blocks": 0,

        /**
         * require or disallow space before function opening parenthesis (off by default)
         */
        "space-before-function-paren": 0,

        /**
         * require or disallow spaces inside brackets (off by default)
         */
        "space-in-brackets": 0,

        /**
         * require or disallow spaces inside parentheses (off by default)
         */
        "space-in-parens": 0,

        /**
         * require spaces around operators
         */
        "space-infix-ops": 0,

        /**
         * require a space after return, throw, and case
         */
        "space-return-throw-case": 0,

        /**
         * require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
         */
        "space-unary-ops": 0,

        /**
         * require or disallow a space immediately following the // in a line comment (off by default)
         */
        "spaced-line-comment": 0,

        /**
         * require regex literals to be wrapped in parentheses (off by default)
         */
        "wrap-regex": 0,

        // ECMAScript 6
        /**
         * enforce the position of the * in generator functions (off by default)
         */
        "generator-star-spacing": 0,

        /**
         * require let or const instead of var (off by default)
         */
        "no-var": 0,

        /**
         * require method and property shorthand syntax for object literals (off by default)
         */
        "object-shorthand": 0,

        // Legacy
        // For compatibility with JSHint
        /**
         * specify the maximum depth that blocks can be nested (off by default)
         */
        "max-depth": 0,

        /**
         * specify the maximum length of a line in your program (off by default)
         */
        "max-len": 0,

        /**
         * limits the number of parameters that can be used in the function declaration. (off by default)
         */
        "max-params": 0,

        /**
         * specify the maximum number of statement allowed in a function (off by default)
         */
        "max-statements": 0,

        /**
         * disallow use of bitwise operators (off by default)
         */
        "no-bitwise": 1,

        /**
         * disallow use of unary operators, ++ and -- (off by default)
         */
        "no-plusplus": 0,

        /**
         * enforce the use of double quotes in jsx
         */
        "jsx-quotes": 2,

        // React
        "react/display-name": 1,
        "react/jsx-boolean-value": 1,
        "react/jsx-curly-spacing": 1,
        "react/jsx-max-props-per-line": 1,
        "react/jsx-no-duplicate-props": 1,
        "react/jsx-no-undef": 1,
        "react/jsx-sort-prop-types": 1,
        "react/jsx-sort-props": 1,
        "react/jsx-uses-react": 1,
        "react/jsx-uses-vars": 1,
//        "react/no-danger": 1,
        "react/no-did-mount-set-state": 1,
        "react/no-did-update-set-state": 1,
        "react/no-multi-comp": 1,
        "react/no-unknown-property": 1,
        "react/prop-types": 1,
        "react/react-in-jsx-scope": 1,
        "react/require-extension": 1,
        "react/self-closing-comp": 1,
        "react/sort-comp": 1,
        "react/wrap-multilines": 1
    }
}
